{
    "componentChunkName": "component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx",
    "path": "/chapter-5-setting-develpment-environment",
    "result": {"data":{"post":{"slug":"/chapter-5-setting-develpment-environment","title":"Chapter 5. Setting Develpment Environment","date":"12.01.2022","tags":[{"name":"HaeramKim","slug":"haeram-kim"},{"name":"BuildYourOwnIoTPlatform","slug":"build-your-own-io-t-platform"}],"description":null,"canonicalUrl":null,"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Chapter 5. Setting Develpment Environment\",\n  \"date\": \"2022-01-12\",\n  \"tags\": [\"HaeramKim\", \"BuildYourOwnIoTPlatform\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"NOTE: this notes are from \\u201CBuild Your Own IoT Platform\\u201D by Anand Tamboli. And I can\\u2019t speak english very well, so some sentences or word might be inappropriate and might have some misunderstandings.  \")), mdx(\"h2\", null, \"Settings that is best for us\"), mdx(\"h3\", null, \"Cloud instance\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Register & make instance @ DigitalOcean\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Ubuntu(18.04 x64)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Basic plan - 4GB RAM, 50GB Disk, Dual-core(Regular Intel)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"NY Data-storage region\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Authenticate with password\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"IPv6, Monitoring, User data option enable\")))), mdx(\"h3\", null, \"Firewall settings\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Initiate firewall via \\u201CUncomplicated Firewall\\u201D\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\u201CUncomplicated Firewall\\u201D is installed in Ubuntu by default\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Here is some \\u201CUncomplicated Firewall\\u201D command that helps us to manage firewall.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ufw app list\"), \": Show all available applications.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ufw allow <application_name>\"), \": Allow that application.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ufw enable\"), \": Run firewall.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ufw status\"), \": Show firewall status.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ufw app info \\\"<application_name>\\\"\"), \": Show information of that application.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ufw allow in \\\"<application_name>\\\"\"), \": It also allows that application. I don\\u2019t know the difference between using and not using \\u201Cin\\u201D command.\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Allow OpenSSH from firewall\")), mdx(\"h3\", null, \"Apache2 server\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Install Apache2\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"apt update\\napt install apache2\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Allow \\u201CApache Full\\u201D from firewall\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"ufw allow in \\\"Apache Full\\\"\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Apache uses port \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"80\"), \" for HTTP and port \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"433\"), \" for HTTPS\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If everything\\u2019s gonna be fine, apache ubuntu default page must be shown when you enter your IP address on your browser.\")), mdx(\"h3\", null, \"MySQL\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Install MySQL installer\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"apt install mysql-server\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Install MySQL with secure version\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"mysql_secure_installation\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"* This will prompt additional configuration console.\\n* You have to select `0(LOW)` for `password validation policy`.\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Setting administration account for MySQL\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"This is how to enter MySQL Shell:\")))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"mysql\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"* Query for showing all root account:\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"SELECT user,authentication_string,plugin,host FROM mysql.user WHERE user=\\\"root\\\";\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"* Query for modifying password for root account:\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY '$YOUR_PASSWORD';\\nFLUSH PRIVILEGES;\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"* And this is expected result when you type show-root query:\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"| user | authentication_string | plugin | host |\\n| root | *A0AF1999141933B3B4C7 \\nAE72544AB01849669F98 | mysql_native_password| localhost |\\n\")), mdx(\"h3\", null, \"PHP\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Installing PHP\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"apt install php libapache2-mod-php php-mysql \\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Configuring PHP\", mdx(\"ol\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Open configuring file that is exists in \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"/etc/apache2/mods-enabled/dir.conf\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Edit that file to:\")))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"<IfModule mod_dir.c>\\nDirectoryIndex index.php index.html index.htm index.cgi index.pl index.xhtml \\n</IfModule>\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"3. Restart apache2 server\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"systemctl restart apache2\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"4. Test whether the server works correctly:\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"vi /var/www/html/test.php\\n# And add php script below to it\\n<?php\\n     echo \\\"php ok\\\";\\n?>\\n\")), mdx(\"h3\", null, \"PHPMyAdmin\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"This is a tool that allows developers to access DB.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Install PHPMyAdmin:\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"apt update\\napt install phpmyadmin php-mbstring php-gettext\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"* NOTE: php-gettext is not stable in Ubuntu 20.04. This is why you have to choose Ubuntu 18.04 when creating droplet.\\n* While Installing PHPMyAdmin, several configuration console might be prompted. Here is recommened selection:\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"# Configure database for phpmyadmin with dbconfig-common \\nYes\\n\\n# What kind of server do you plan to use\\nApache2 # You have to tap spacebar to select this opiton.\\n\\n# Communication\\nUnix socket\\n\\n# Set database name, username, password on your own\\n# Some errors might be occured when you select password policy to MEDIUM(1) or HIGH(2). That's why you have to choose LOW(0) when you select policies.\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Configure plugin && restart server\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"phpenmod mbstring\\nsystemctl restart apache2\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Securing PHPMySQL\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"We\\u2019re gonna use \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"htaccess\"), \"feature of apache to securing it.\")))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"# Open /etc/apache2/conf-available/phpmyadmin.conf and modify to:\\nAlias /phpmyadmin /usr/share/phpmyadmin\\n<Directory /usr/share/phpmyadmin>\\n    Options SymLinksIfOwnerMatch\\n    DirectoryIndex index.php\\n    AllowOverride All \\n.....\\n.....\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"* Add following contents to the file\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"# Open /usr/share/phpmyadmin/.htaccess\\nAuthType Basic\\nAuthName \\\"Restricted Files\\\"\\nAuthUserFile /etc/phpmyadmin/.htpasswd\\nRequire valid-user\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"* Set admin password\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"htpasswd -c /etc/phpmyadmin/.htpasswd $USERNAME\\n# And then entering password line will be prompted\\n\")), mdx(\"h3\", null, \"DNS\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Use noip.com to register custom free domain\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Set destination IP as droplet instance uses.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Register domain to DigitalRecord and create new record with Type A.\")), mdx(\"h3\", null, \"Virtual Host\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"I don\\u2019t know what exactly virtual host means, but i think when one server hosts more than two hosts, like \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"www.example1.com\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"www.example2.com\"), \"\\u2026, It is called virtual host\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"mkdir -p /var/www/<your-domain>/html\\nchown -R $USER:$USER /var/www/<your-domain>/html\\nchmod -R 755 /var/www/<your-domain>\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Make main index file\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"# Make index.php in /var/www/<your-domain>/html/\\n# And then add following contents to the file:\\n<?php\\n     echo(\\\"Hi...this is our webpage with domain name !\\\");\\n?>\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Make virtual host file\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"# Make <your-domain>.conf file in /etc/apache2/sites-available/\\n# And then add following contents:\\n<VirtualHost *:80>\\n    ServerAdmin admin@<your-domain>\\n\\n    ServerName <your-domain>\\n    ServerAlias www.<your-domain>\\n\\n    DocumentRoot /var/www/<your-domain>/html\\n\\n    ErrorLog ${APACHE_LOG_DIR}/error.log\\n    CustomLog ${APACHE_LOG_DIR}/access.log combined\\n</VirtualHost>\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"* And then enable virtual host:\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"a2ensite <your-domain>.conf\\na2dissite 000-default.conf\\n\\n# Typing command below must prints \\\"Syntax OK\\\"\\napache2ctl configtest\\n\\n# Restart server\\nsystemctl restart apache2\\n\")), mdx(\"h3\", null, \"SSL Certificates\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Install SSL Certificates via \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Let\\u2019s Encrypt\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Certbot\"), \".\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"add-apt-repository ppa:certbot/certbot\\napt install python-certbot-apache\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Certificate our site\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"# When you registered www-prefixed domain\\n# like \\\"www.example.com\\\", add \\\"www.<your-domain>\\\" too.\\ncertbot --apache -d <your-domain>\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"* After this command runs, you have to enter email address for notification and agree with policy stuff.\\n* And also, you have to select \\\"redirect\\\" option when selection console is prompted.\\n* When messages saying \\\"Congratulations!\\\" is printed, it's done.\\n* You can verify the Certificate with `http://www.ssllabs.com/ssltest/analyze.html?d=<your-domain>` page.\\n\")), mdx(\"h3\", null, \"NodeJS & NodeRED\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"To install NodeJS to Ubuntu, you have to register NodeJS official repository to apt first.\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"# Register repository\\ncurl -sL https://deb.nodesource.com/setup_16.x | sudo -E bash -\\n\\n# Install NodeJS & NPM\\napt install nodejs\\n\\n# Verify installation (Check version)\\nnodejs -v\\nnpm -v\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Install NodeRED\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"npm install -g --unsafe-perm node-red\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Allow NodeRED from firewall. NodeRED uses port \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"1880\"), \".\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"ufw allow 1880/tcp\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Configure NodeRED Setting\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"You can get settings.js file from \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/knewron-technologies/in24hrs\"\n  }, \"Here\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"path for old settings.js file is \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"/root/.node-red/settings.js\"), \". You have to overwrite this file.\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Securing NodeRED\", mdx(\"ol\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Get a hashed-password\")))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"# Install tool\\nnpm install -g node-red-admin\\n\\n# Get hashed password\\nnode-red-admin hash-pw\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"* After typing the last command, password input console will be shown. Enter a password u like.\\n* And then, hashed password will be printed to the console. Copy it to paste in `settings.js`.\\n2. Modify `settings.js`\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"# Open settings.js and modify it to:\\nadminAuth: {\\n    type: \\\"credentials\\\",\\n    users: [\\n        {\\n            username: \\\"<your-username>\\\",\\n            password: \\\"<hashed-password>\\\",\\n            permissions: \\\"*\\\"\\n        },\\n    ] \\n}, \\n...\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Run NodeRED on background with logging\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"node-red > node-red.log &\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"NOTE: this notes are from “Build Your Own IoT Platform” by Anand Tamboli. And I can’t speak english very well, so some sentences or word…","timeToRead":1,"banner":null}},"pageContext":{"slug":"/chapter-5-setting-develpment-environment","formatString":"DD.MM.YYYY"}},
    "staticQueryHashes": ["2744905544","3090400250","318001574"]}